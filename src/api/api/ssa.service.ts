/**
 * SSA
 * This is the internal API for 'Serverless SurveyForm App'.
 *
 * OpenAPI spec version: 0.1
 * Contact: ajay.t.kumar@capgemini.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { SurveyForm } from '../model/surveyForm';
import { SurveyResponse } from '../model/surveyResponse';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class SsaService {

    protected basePath = 'https://4tmo1tdjz2.execute-api.us-east-1.amazonaws.com/dev';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param SurveyForm 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addSurvey(SurveyForm: SurveyForm, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public addSurvey(SurveyForm: SurveyForm, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public addSurvey(SurveyForm: SurveyForm, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public addSurvey(SurveyForm: SurveyForm, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (SurveyForm === null || SurveyForm === undefined) {
            throw new Error('Required parameter SurveyForm was null or undefined when calling addSurvey.');
        }

        let headers = this.defaultHeaders;

        // authentication (Cognito_Custom_Authorizer) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/surveyform`,
            SurveyForm,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param survey_id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSurvey(survey_id?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<SurveyForm>>;
    public getSurvey(survey_id?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<SurveyForm>>>;
    public getSurvey(survey_id?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<SurveyForm>>>;
    public getSurvey(survey_id?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (survey_id !== undefined && survey_id !== null) {
            queryParameters = queryParameters.set('survey_id', <any>survey_id);
        }

        let headers = this.defaultHeaders;

        // authentication (Cognito_Custom_Authorizer) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<SurveyForm>>(`${this.basePath}/surveyform`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param survey_id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSurveyResponse(survey_id: string, observe?: 'body', reportProgress?: boolean): Observable<Array<SurveyResponse>>;
    public getSurveyResponse(survey_id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<SurveyResponse>>>;
    public getSurveyResponse(survey_id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<SurveyResponse>>>;
    public getSurveyResponse(survey_id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (survey_id === null || survey_id === undefined) {
            throw new Error('Required parameter survey_id was null or undefined when calling getSurveyResponse.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (survey_id !== undefined && survey_id !== null) {
            queryParameters = queryParameters.set('survey_id', <any>survey_id);
        }

        let headers = this.defaultHeaders;

        // authentication (Cognito_Custom_Authorizer) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<SurveyResponse>>(`${this.basePath}/surveyresponse`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param SurveyResponse 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public respondSurvey(SurveyResponse: SurveyResponse, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public respondSurvey(SurveyResponse: SurveyResponse, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public respondSurvey(SurveyResponse: SurveyResponse, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public respondSurvey(SurveyResponse: SurveyResponse, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (SurveyResponse === null || SurveyResponse === undefined) {
            throw new Error('Required parameter SurveyResponse was null or undefined when calling respondSurvey.');
        }

        let headers = this.defaultHeaders;

        // authentication (Cognito_Custom_Authorizer) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/surveyresponse`,
            SurveyResponse,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
